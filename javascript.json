{
  "name": "javascript",
  "version": 0,
  "cards": [
    {
      "id": "cwx0v9xt3b",
      "version": 0,
      "active": true,
      "question": "What is the difference between single and double quotes?",
      "answer": "There is no difference, just like in python.",
      "reviews": []
    },
    {
      "id": "uuk104ilr4",
      "version": 0,
      "active": true,
      "question": "What is the difference between import/export and require? How do you use each one?",
      "answer": "\"import/export - part of ES6 - lets you import just a part of a file (module?), which can save memory    require - how you use CommonJS modules   CommonJS is older; ES6 is newer. You should use the ES6 style if possible.   import express from \"\"express\"\"; const express = require(\"\"express\"\");\"",
      "reviews": []
    },
    {
      "id": "bk1lwjhfpb",
      "version": 0,
      "active": true,
      "question": "What are the three possible states of a Promise? What does each mean?",
      "answer": "- pending: haven't gotten a value yet - fulfilled: got a valid value - rejected: the operation failed",
      "reviews": []
    },
    {
      "id": "a0fd1bq75g",
      "version": 0,
      "active": true,
      "question": "How do you block your code until a promise has a valid value?",
      "answer": "await my_promise;",
      "reviews": []
    },
    {
      "id": "3nuz27uef9",
      "version": 0,
      "active": true,
      "question": "What is the difference between let, var and const?",
      "answer": "let - the variable is in the scope of the immediate block i.e. within the nearest {}   var - the variable is in the scope of the function   const - the variable is block-scoped like let, but cannot be updated or re-declared",
      "reviews": []
    },
    {
      "id": "oth6ebcc3m",
      "version": 0,
      "active": true,
      "question": "What is the `new` keyword used for?",
      "answer": "Used to call the constructor of an object type to make an instance of that object.",
      "reviews": []
    },
    {
      "id": "no6umn80jp",
      "version": 0,
      "active": true,
      "question": "What is the static keyword for?",
      "answer": "It defines a method as being only callable on the class, not an instance of that class. Like @staticmethod in Python.",
      "reviews": []
    },
    {
      "id": "6ra4tywla4",
      "version": 0,
      "active": true,
      "question": "How do you get the type of a variable? What type does it return?",
      "answer": "typeof myvar   Returns a string.",
      "reviews": []
    },
    {
      "id": "bn57d45p35",
      "version": 0,
      "active": true,
      "question": "What is the difference between the == and the === operators? What are their equivalents for negation?",
      "answer": "== will try to convert one type to the other before doing the comparison.   === will only result in true if the two variables are the same type AND the same value.   Equivalents are != and !==",
      "reviews": []
    },
    {
      "id": "nokf6dkv8z",
      "version": 0,
      "active": true,
      "question": "What is the difference between for...in and for...of loops?",
      "answer": "for...in loops over enumerable property names of an object.   for...of is a new ES6 thing that uses the object-specific iterator and loops over the values generated by that.",
      "reviews": []
    },
    {
      "id": "5stfwbjtku",
      "version": 0,
      "active": true,
      "question": "ts: write the type for an array of numbers.",
      "answer": "number[]",
      "reviews": []
    },
    {
      "id": "6e31471m0z",
      "version": 0,
      "active": true,
      "question": "ts: what type is used to indicate that there are no restrictions on type?",
      "answer": "any",
      "reviews": []
    },
    {
      "id": "sqskfose28",
      "version": 0,
      "active": true,
      "question": "ts: how do you define a type alias?",
      "answer": "type Point = {   x: number;   y: number; }",
      "reviews": []
    },
    {
      "id": "kmn9eo0aiq",
      "version": 0,
      "active": true,
      "question": "ts: what is a union type?",
      "answer": "A union type is declared with the syntax `type1 | type2`. For variables that are a union type, you can only do things with those variables that you can do with both types. If you want to do more, you must use narrowing.",
      "reviews": []
    },
    {
      "id": "d1au5ak95i",
      "version": 0,
      "active": true,
      "question": "ts: how do you make a property or parameter optional? If you don't pass anything in it, what is its value?",
      "answer": "You put a `?` at the end of its name. Example:   {   first: string;   last?: string; }   If you don't pass anything in it, its value is `undefined`. In this sense, the type of the above variable is `string | undefined`.",
      "reviews": []
    },
    {
      "id": "yj4pao1s6i",
      "version": 0,
      "active": true,
      "question": "ts: what is the difference between type aliases and interfaces?",
      "answer": "1) Type aliases are created through assignment expressions, whereas interface definitions are similar to class definitions.  2) You cannot implement union types. 3) You cannot redeclare type aliases, but you can redeclare an interface - in this case, the two interfaces are merged.    A good heuristic is to use interfaces until you need to use type aliases.",
      "reviews": []
    },
    {
      "id": "dop1h0e5ci",
      "version": 0,
      "active": true,
      "question": "ts: what are the two ways of doing type assertions?",
      "answer": "const typedVar = oldVar as myType const typedVar = <myType>oldVar",
      "reviews": []
    },
    {
      "id": "ufgei6djne",
      "version": 0,
      "active": true,
      "question": "ts: what are literal types?",
      "answer": "\"If you use a variable with a value in it in place of a type, then it represents a type where valid values are constrained to the set of allowable values for that variable. For example:    let changingString = \"\"Hello World\"\"; changingString = \"\"OlÃ¡ Mundo\"\"; // Because `changingString` can be changed to any string, // it simply represents the string type   const constantString = \"\"Hello World\"\"; // Because `constantString` can only represent 1 possible string, // it is a type that can only be the string \"\"Hello World\"\"\"",
      "reviews": []
    },
    {
      "id": "u6snxlv9wn",
      "version": 0,
      "active": true,
      "question": "\"ts: ensure that a variable can only be equal to \"\"hello\"\", \"\"world\"\" or \"\"name\"\"\"",
      "answer": "\"type constrainedType = \"\"hello\"\" | \"\"world\"\" | \"\"name\"\"\"",
      "reviews": []
    },
    {
      "id": "iopyvfkwox",
      "version": 0,
      "active": true,
      "question": "ts: what is narrowing?",
      "answer": "\"Narrowing is a process of constraining a variable whose type has some wiggle room to a subset of that type. The typescript transpiler is smart enough to notice this and give you access to everything that the type you narrowed to.   For example:   if (typeof myvar === \"\"number\"\") {   // can do anything with myvar here that you can do with number }\"",
      "reviews": []
    },
    {
      "id": "lvz2h9tv33",
      "version": 0,
      "active": true,
      "question": "ts: check whether the variable myVar is an instance of the type myType",
      "answer": "myVar instanceof myType",
      "reviews": []
    },
    {
      "id": "jb0darvtt8",
      "version": 0,
      "active": true,
      "question": "ts: how do you define a function with no return type?",
      "answer": "If you leave the return value blank, it will be `any`. You have to do it like so:   function myFunc(): void { ... }",
      "reviews": []
    },
    {
      "id": "q4r3lx25ub",
      "version": 0,
      "active": true,
      "question": "ts: how do you express the type for an anonymous function that takes a string as input and returns a number as output (2 ways)?",
      "answer": "In a function parameter:(myString: string) => number   In an object type definition: {   someOtherField: string;   (myString: string): number;  }",
      "reviews": []
    },
    {
      "id": "buaztubu2l",
      "version": 0,
      "active": true,
      "question": "ts: define a generic function that returns the first element of an array of any type.",
      "answer": "function myFunc<Type>(myArray: Type[]): Type { ... }",
      "reviews": []
    },
    {
      "id": "ecz90bwlo8",
      "version": 0,
      "active": true,
      "question": "ts: declare a class, Point, with an x coordinate and a y coordinate, a constructor that assigns values to them, and and a function that prints them.",
      "answer": "class Point {   x: number;   y: number;     constructor(x: number, y: number) {     this.x = x;     this.y = y;   }     printMe(): void {     console.log(this.x, this.y);   } }",
      "reviews": []
    },
    {
      "id": "v184c35gu7",
      "version": 0,
      "active": true,
      "question": "Describe how electron works from a high level.",
      "answer": "\"Electron's model is similar to a browser's model, but different in some ways.   First you have the main process. This process is the application's entry point. It is responsible for managing various meta-things about the system, like adding custom APIs to interact with the user's operating system, intercepting signals, that sort of thing. It also creates and manages application windows via instances of the `BrowserWindow` class. Each `BrowserWindow` instance corresponds to a process, just like a tab in a browser.   Each instance of the `BrowserWindow` class is basically an instance of a web app. After running \"\"preload scripts\"\", which can be used to expose arbitrary APIs to the web app, the window enters the web app via an HTML file that then loads scripts, HTML, CSS etc in the usual way.\"",
      "reviews": []
    },
    {
      "id": "3dxan0hjmz",
      "version": 0,
      "active": true,
      "question": "What is babel used for?",
      "answer": "Babel is a JS transpiler that turns ECMAScript 2015+ JS into JS that can run in current and older browsers and environments.",
      "reviews": []
    },
    {
      "id": "kdmh8lvah8",
      "version": 0,
      "active": true,
      "question": "What is a .mjs file? What is a .cjs file?",
      "answer": "An .mjs file is an ES6 module file. A .cjs file is a commonJS module file.",
      "reviews": []
    },
    {
      "id": "n1vbp66pig",
      "version": 0,
      "active": true,
      "question": "What is a javascript module?",
      "answer": "There is a lot of information about this out there, but ultimately a module is just a file that you can import in other js files in order to split up your program to make it more manageable.",
      "reviews": []
    },
    {
      "id": "0bkvnd1tzc",
      "version": 0,
      "active": true,
      "question": "\"What is the # symbol used for?\"",
      "answer": "When placed at the beginning of a class property's name, means that property is private.",
      "reviews": []
    },
    {
      "id": "5qcp2v7h04",
      "version": 0,
      "active": true,
      "question": "What does the following code do:   let newVar = myObj.objProperty?;",
      "answer": "Normally, if we tried to access myObj.objProperty and it wasn't there an exception would be raised. Appending a `?` to myObj.objProperty means that if the property isn't there, `undefined` is returned.",
      "reviews": []
    },
    {
      "id": "gqf6a7u4dg",
      "version": 0,
      "active": true,
      "question": "nodejs: what is the EventEmitter class? What are its two main methods? How are they used?",
      "answer": "It is a class on which you can register callbacks that are run in response to certain events. Events are just strings, and may have arguments associated with them.   const EventEmitter = require('events'); const eventEmitter = new EventEmitter();   // register logging callback for event 'start' eventEmitter.on('start', () => {   console.log('started'); })   // trigger the 'start' event eventEmitter.emit('start')",
      "reviews": []
    },
    {
      "id": "no4car0kth",
      "version": 0,
      "active": true,
      "question": "Run a function with two arguments after 250 milliseconds.",
      "answer": "setTimeout(func, 250, arg1, arg2)",
      "reviews": []
    },
    {
      "id": "ai1ls1d7r6",
      "version": 0,
      "active": true,
      "question": "When you pass less than the required number of arguments to a function, what is passed in the missed arguments?",
      "answer": "The missed arguments have values of `undefined`.",
      "reviews": []
    },
    {
      "id": "2buvje2zia",
      "version": 0,
      "active": true,
      "question": "\"What is a Promise? Define it in typescript.  Explain the typescript. Give an example that fulfills the promise with the value \"\"hello world\"\" after 250 ms.\"",
      "answer": "\"A promise is an object representing the eventual completion or failure of an asynchronous operation.   class Promise {   constructor( ( resolveFunc: (value) => void, rejectFunc: (reason) => void ) => void ) { ... } }    Basically you pass an executor function to the Promise constructor. This function takes two parameters:   1) a resolve function, which the executor function calls with a single value in the event of success 2) a reject function, which the executor function calls with a reason for failure in the event of failure   const myPromise = Promise( (resolve, reject) => {   setTimeout( () => { resolve(\"\"hello world\"\") }, 250 ) })\"",
      "reviews": []
    },
    {
      "id": "f2jmypdjh1",
      "version": 0,
      "active": true,
      "question": "What does Promise.then(resolveFunc, rejectFunc) do?",
      "answer": "Returns a new promise.   If the original promise is resolved, the new promise represents the operation contained in `resolveFunc`. The original resolve value is passed to `resolveFunc` and the new promise resolves to the return value of `resolveFunc`.   If the original promise is rejected, the new promise represents the operation contained in `rejectFunc`. The original reject reason is passed to `rejectFunc` and the new promise resolves to the return value of `rejectFunc`.   If either resolveFunc or rejectFunc is not specified, and the promise was resolved or rejected respectively, then the new promise resolves to the original resolved value or rejection reason.",
      "reviews": []
    },
    {
      "id": "6sztzasxh4",
      "version": 0,
      "active": true,
      "question": "How does Promise.catch(rejectFunc) work?",
      "answer": "It is equivalent to Promise.then(null, rejectFunc).",
      "reviews": []
    },
    {
      "id": "npc9va27kt",
      "version": 0,
      "active": true,
      "question": "What does the Promise.finally method do?",
      "answer": "You pass a function with no arguments. Returns a Promise that runs the function once the original promise is either resolved or rejected.",
      "reviews": []
    },
    {
      "id": "bjd6ql8i1h",
      "version": 0,
      "active": true,
      "question": "How does a try-catch-finally block work?",
      "answer": "\"Very simple:   try {   // might raise exception }  catch (error) {   // can omit the \"\"(error)\"\" part if you don't need to use it } finally {   // this code always runs after both the try and catch blocks }\"",
      "reviews": []
    },
    {
      "id": "npbfix83lw",
      "version": 0,
      "active": true,
      "question": "How do you raise an exception?",
      "answer": "\"throw new Error(\"\"here is an error\"\")\"",
      "reviews": []
    },
    {
      "id": "5xzlzrb282",
      "version": 0,
      "active": true,
      "question": "What does ... do in a function argument when calling that function?",
      "answer": "Doing ...vars is equivalent to doing *vars in python: it expands the array into arguments. Can be used in function arguments or in array (and maybe in object declaration?).",
      "reviews": []
    },
    {
      "id": "cknowrmzop",
      "version": 0,
      "active": true,
      "question": "What is webpack?",
      "answer": "Webpack is a program that can do a lot, but whose main purpose is to bundle js modules together into one big one for usage in a browser.",
      "reviews": []
    },
    {
      "id": "8kc3zxwtek",
      "version": 0,
      "active": true,
      "question": "How are getters/setters implemented on JS classes?",
      "answer": "You put get or set in front of a method with the property name. The getter takes no arguments; the setter takes one argument.",
      "reviews": []
    },
    {
      "id": "t845ca0p2m",
      "version": 0,
      "active": true,
      "question": "vue: what are the important properties of the options object passed in the Vue instance constructor? What do they mean?",
      "answer": "\"data: is an object or function that returns an object (more often) that contains data related to the component that may be changed; when it is changed, the component is re-rendered    computed: accessed like elements of data, but are basically getter methods   instance lifecycle hooks: have names like \"\"created\"\", \"\"mounted\"\", \"\"updated\"\" and \"\"destroyed\"\", and specify functions to run upon these lifecycle events   props: an array of strings that become properties on the HTML that the component becomes   methods: functions that are called in response to events in the HTML etc\"",
      "reviews": []
    },
    {
      "id": "ig367en0cn",
      "version": 0,
      "active": true,
      "question": "What is the window object?",
      "answer": "It is basically the global namespace. All global objects and functions are properties of it. In many (all?) cases the properties are accesible via their name, for example `document`. Some examples are: - window.document - window.screen - window.location - window.history - window.alert - window.confirm - window.prompt - window.setTimeout - window.clearTimeout - window.setInterval  - window.clearInterval",
      "reviews": []
    },
    {
      "id": "bk63b65lks",
      "version": 0,
      "active": true,
      "question": "What is the document object?",
      "answer": "\"Is of type Document. Represents any web page loaded in the browser and serves as an entry point into the page's content, which is the \"\"DOM tree\"\".\"",
      "reviews": []
    },
    {
      "id": "t9u45nazg3",
      "version": 0,
      "active": true,
      "question": "\"What does \"\"@\"\" mean in a module path?\"",
      "answer": "This is not part of the ECMAScript spec. The meaning depends on the module loader or module bundler, like babel or webpack.",
      "reviews": []
    },
    {
      "id": "vd0blp9gzk",
      "version": 0,
      "active": true,
      "question": "What is Lodash?",
      "answer": "A utility library that provides modular methods for working with arrays, numbers, objects, strings etc.",
      "reviews": []
    },
    {
      "id": "xjb8wwlseo",
      "version": 0,
      "active": true,
      "question": "vue: what are the three most common directives? Also specify shorthand versions if any. What do they do?",
      "answer": "\"v-if: removes/inserts the containing element based on the truthiness of the referenced data <p v-if=\"\"seen\"\">...</p>   v-bind: lets you bind a value to an attribute of an element; the following is equivalent to <a href=\"\"asdfasdf\"\">...</a> with url = \"\"asdfasdf\"\" <a v-bind:href=\"\"url\"\">...</a> shorthand: v-bind:href=\"\"url\"\" === :href=\"\"url\"\"   v-on: specifies an action to take upon a DOM event <checkbox v-on:click=\"\"triggerClick\"\"/> shorthand: v-on:click=\"\"myMethod\"\" === @click=\"\"myMethod\"\"\"",
      "reviews": []
    },
    {
      "id": "s5wza4yv5k",
      "version": 0,
      "active": true,
      "question": "vue: what is the type of Vue.data? Why?",
      "answer": "Object | () => Object   When the Vue instance is a component, data must be declared as a function that returns the initial data object. This is because there will be many instances created using the same definition.",
      "reviews": []
    },
    {
      "id": "4ox2ocuu0w",
      "version": 0,
      "active": true,
      "question": "ts: What is the Record type? How do you use it?",
      "answer": "\"It is a generic type with two types. The first is the type of the keys; the second is the type of the values. So, it can be used to provide a type-restricted object.   const myRecord: Record<string, number> = {   \"\"hello\"\": 1,   \"\"world\"\": 2, }\"",
      "reviews": []
    },
    {
      "id": "p17x1tvqk2",
      "version": 0,
      "active": true,
      "question": "vue: how do you emit custom events in a Vue instance?",
      "answer": "In a Vue instance method, you call: this.$emit(event, value)",
      "reviews": []
    },
    {
      "id": "o2h8rqfsy3",
      "version": 0,
      "active": true,
      "question": "electron: what are the following top-level imports for: - app - ipcMain - ipcRenderer - protocol - shell - dialog",
      "answer": "app: exposes a bunch of events pertaining to the top-level app, as well as some functionality pertaining to the top-level app   ipcMain: is an EventEmitter that handles synchronous and asynchronous messages from BrowserWindow processes   ipcRenderer: is an EventEmitter that is used inside BrowserWindow processes to emit events that can be caught in the main process using ipcMain   protocol: lets you register a custom protocol (scheme), and then intercept requests for this protocol   shell: lets us manage files and URLs using their default applications   dialog: lets us use system dialogs for browsing/saving files, alerting etc",
      "reviews": []
    },
    {
      "id": "anwt470sg6",
      "version": 0,
      "active": true,
      "question": "ts: how do you make a class property protected? How does a protected property differ from a private one?",
      "answer": "Add the protected keyword to the beginning.   Private properties are only accessible within the class defining them, whereas protected members are accessible in the class that defines them as well as in classes that inherit from that class, and in classes that inherit from those classes, and so on.",
      "reviews": []
    },
    {
      "id": "q0678hecpr",
      "version": 0,
      "active": true,
      "question": "How do you test whether an array has a certain element?",
      "answer": "myArray.includes(myElement)",
      "reviews": []
    },
    {
      "id": "xs7ew3yx4h",
      "version": 0,
      "active": true,
      "question": "How do you append an element to an array?",
      "answer": "myArray.push(newElement)",
      "reviews": []
    },
    {
      "id": "c8jj05fsc6",
      "version": 0,
      "active": true,
      "question": "How do you get the length of an array?",
      "answer": "myArray.length",
      "reviews": []
    },
    {
      "id": "fa3pildih4",
      "version": 0,
      "active": true,
      "question": "What is a Proxy? How do you instantiate one?",
      "answer": "A Proxy is an object that proxies requests to another object, while providing an interface to intercept and redefine fundamental operations on that object.   const myProxy = new Proxy(target, handler);",
      "reviews": []
    },
    {
      "id": "m8riiwmonx",
      "version": 0,
      "active": true,
      "question": "What is the cleanest way to merge two objects, with properties of one taking precedence of those of the other? Does it only produce a new object, or is the target object modified in place?",
      "answer": "const newObj = Object.assign(lowerPref, higherPref)   After the call, newObj === lowerPref, and lowerPref is modified in place.",
      "reviews": []
    },
    {
      "id": "e6gbhxyz7h",
      "version": 0,
      "active": true,
      "question": "What is the Map type? How do you use it?",
      "answer": "Maps one type (can be of other types than string or Symbol keys, as it is with Object) to another. Cannot be accessed using `.` notation; must use .get() and .set(). Also, the elements are ordered.  let myMap = new Map(); myMap.set(key1, value1); myMap.set(key2, value2);",
      "reviews": []
    },
    {
      "id": "y4eye76zwe",
      "version": 0,
      "active": true,
      "question": "What is the difference between Map and Record?",
      "answer": "Map is a native ES6 thing. Record is a typescript only thing. Map must be constructed using `new Map()`. Record can be constructed like an object.",
      "reviews": []
    },
    {
      "id": "n986i9pizg",
      "version": 0,
      "active": true,
      "question": "What is the Symbol type? How do you use it? What is surprising about it?",
      "answer": "\"It is a built-in object whose constructor returns a variable of type `symbol` that is guaranteed to be unique. Often used to add unique property keys to an object that won't collide with any other property keys in the object.   let sym1 = Symbol(\"\"seed\"\"); let sym2 = Symbol(\"\"seed\"\");   Note that sym1 !== sym2; each invocation of the Symbol constructor produces a different `symbol` each time.   Note that you do not use the `new` keyword.\"",
      "reviews": []
    },
    {
      "id": "sjrq5ua5a5",
      "version": 0,
      "active": true,
      "question": "What is the arguments variable inside a function for? What is its type?",
      "answer": "When inside any function, it is an object that is Array-like that contains the arguments. You can access each arg like arguments[0], arguments[1], etc.",
      "reviews": []
    },
    {
      "id": "mgrp0xll7g",
      "version": 0,
      "active": true,
      "question": "How do you determine whether the object myObj has the property myProperty?",
      "answer": "myProperty in myObj",
      "reviews": []
    },
    {
      "id": "06xx58h6kt",
      "version": 0,
      "active": true,
      "question": "What are the three symbolic values of the number type?",
      "answer": "+Infinity -Infinity NaN",
      "reviews": []
    },
    {
      "id": "9dixhhax6j",
      "version": 0,
      "active": true,
      "question": "What interface is used to get to math-related functions?",
      "answer": "You use the built-in Math object.",
      "reviews": []
    },
    {
      "id": "jqy3wpzvs3",
      "version": 0,
      "active": true,
      "question": "How does a Date object store its time behind the scenes?",
      "answer": "As a number that represents milliseconds since 00:00:00 January 1 1970 UTC. Note that this is not the same as the UNIX epoch, which is the number of seconds that have elapsed since 00:00:00 January 1 1970 UTC. Note that both times ignore leap seconds.",
      "reviews": []
    },
    {
      "id": "tssda4xu5g",
      "version": 0,
      "active": true,
      "question": "Given a Date object, what standard format is used to 1) get or set a part of the datetime 2) work in local time or UTC time 3) work with ms, seconds, hours, day of month, day of week, and 4-digit year?   Give an example.",
      "answer": "\"1) \"\"get\"\" for getting, \"\"set\"\" for setting 2) Nothing for local time, UTC for UTC 3) Milliseconds, Seconds, Hours, Date (for day of month), Day (for day of week), FullYear  let d = new Date(); d.getUTCFullYear();\"",
      "reviews": []
    },
    {
      "id": "756vhqdbcw",
      "version": 0,
      "active": true,
      "question": "How do you get an array containing an object's keys?",
      "answer": "Object.keys(myObj)",
      "reviews": []
    },
    {
      "id": "dyc5yfvicn",
      "version": 0,
      "active": true,
      "question": "let a = {   asdf: 1 }   function func1(x) {   x.asdf = 2; }     function func2(x) {   x = {     asdf: 5,   }; }   console.log(a)  func1(a) console.log(a) func2(a) console.log(a)   What is printed? Why?",
      "answer": "{ asdf: 1 } { asdf: 2 } { asdf: 2 }   If you modify an object passed to a function, those changes occur on the object outside of the function. However, if you reassign the object inside the function, it is a new object within the function scope. Thus, any changes made to it are not made on the object outside the function.",
      "reviews": []
    },
    {
      "id": "atcvi7bco4",
      "version": 0,
      "active": true,
      "question": "const a = {   asdf: 1, }  console.log(a); a.asdf = 4; console.log(a);   What happens?",
      "answer": "The code prints:  { asdf: 1 } { asdf: 4 }   The const statement only applies to reassignments, not mutations of things that fall under the object scope.",
      "reviews": []
    },
    {
      "id": "yk4buat4xt",
      "version": 0,
      "active": true,
      "question": "\"GET the body, as text, of the URL \"\"myUrl\"\".\"",
      "answer": "const response = await fetch(myUrl); const text = await response.text();",
      "reviews": []
    },
    {
      "id": "y22nrkl7c8",
      "version": 0,
      "active": true,
      "question": "\"Make a POST request to the url \"\"myUrl\"\" with the body {\"\"hello\"\": \"\"world\"\"}, then parse the response body into a new object as JSON.\"",
      "answer": "\"const response = await fetch(myUrl, {   method: \"\"POST\"\",   body: JSON.stringify({hello: \"\"world\"\"}), }); const newObj = await response.json();\"",
      "reviews": []
    },
    {
      "id": "wdf84nt2p5",
      "version": 0,
      "active": true,
      "question": "What is the streams API? Give a rundown on what it is and what it entails.",
      "answer": "It is basically a way of processing data bit-by-bit. The main objects are ReadableStream and WritableStream.",
      "reviews": []
    },
    {
      "id": "c7cgc3lcsh",
      "version": 0,
      "active": true,
      "question": "How do you parse a string containing JSON into an object?",
      "answer": "const obj = JSON.parse(myString);",
      "reviews": []
    },
    {
      "id": "mw80q6tgf3",
      "version": 0,
      "active": true,
      "question": "How do you convert an object into a string containing JSON?",
      "answer": "const myString = JSON.stringify(myObj);",
      "reviews": []
    },
    {
      "id": "3c7ku61miv",
      "version": 0,
      "active": true,
      "question": "What are the two ways of creating a regular expression?",
      "answer": "\"let re = /ab+c/; let re = new RegExp(\"\"ab+c\"\");\"",
      "reviews": []
    },
    {
      "id": "1ijqael7ko",
      "version": 0,
      "active": true,
      "question": "What are the two methods of RegExp objects? Explain what they are for.",
      "answer": "exec() - executes a search for a match in a string; respects the stateful sticky and global flags   test() - tests whether a match is found in a string",
      "reviews": []
    },
    {
      "id": "n2tzu0b3ye",
      "version": 0,
      "active": true,
      "question": "What does the following do:   const { x, y } = myObj;   What is it called?",
      "answer": "\"It is equivalent to:   const x = myObj.x; const y = myObj.y;   This is referred to as a \"\"destructuring assignment\"\".\"",
      "reviews": []
    },
    {
      "id": "birxlz86d7",
      "version": 0,
      "active": true,
      "question": "Use .reduce() to sum the elements of the following array:   const myArr = [1, 2, 3, 4];",
      "answer": "const mySum = myArr.reduce((previous, current) => {   previous + current; })",
      "reviews": []
    },
    {
      "id": "o9hkecp7r5",
      "version": 0,
      "active": true,
      "question": "What is the signature of the .reduce() method of an array? How does it work? What is the second arg for?",
      "answer": "reduce(   reduceFunc: (previous: any, current: any) => any,   firstPrevious: any, )   .reduce() is used to aggregate all of the values of an array somehow. The passed function always gets the previous result in the first arg, and the current element in the second arg.   If firstPrevious is not defined, the iteration starts with previous = arr[0] and current = arr[1].   If firstPrevious is defined, the iteration starts with previous = firstPrevious and current = arr[0].",
      "reviews": []
    },
    {
      "id": "sdfb2bvfyl",
      "version": 0,
      "active": true,
      "question": "How do you call a callback every 2 seconds?",
      "answer": "const id = setInterval(callback, 2000)",
      "reviews": []
    },
    {
      "id": "dv3kz5l2eu",
      "version": 0,
      "active": true,
      "question": "How do you get a Promise that is resolved when a group of promises is resolved? What does this Promise resolve to? What happens if one of the promises is rejected?",
      "answer": "const p = Promise.all([promise1, promise2, promise3])   Resolves to an array containing the values that each promise resolved to.   If one of the input promises is rejected, the returned promise rejects immediately.",
      "reviews": []
    },
    {
      "id": "y0ex03s6pf",
      "version": 0,
      "active": true,
      "question": "What shortcut can be used to make a function return a Promise?",
      "answer": "Use the `async` keyword before the declaration. Works both with regular functions and with arrow functions.",
      "reviews": []
    },
    {
      "id": "g51b1lr42x",
      "version": 0,
      "active": true,
      "question": "Why does having `await` in a function mean that it must be async?",
      "answer": "\"Do not think of `await` as meaning \"\"block until this Promise has a value\"\". There is no such thing as blocking if you are working in the async paradigm.   Think of `await` as meaning \"\"relinquish control of the thread until this Promise has a value\"\".\"",
      "reviews": []
    },
    {
      "id": "bc0dv8hojk",
      "version": 0,
      "active": true,
      "question": "ts: how can you create an instance of the following object without using the `:` character, or `obj.property = value`?   type myType = {   var1: string;   var2: number; }   Why does this work?",
      "answer": "\"const var1 = \"\"hello\"\"; const var2 = 4; const myObj = {var1, var2};   As long as the variables have the same names as the properties to which they are assigned, TS knows where to assign them.\"",
      "reviews": []
    },
    {
      "id": "jnbt1cl8pm",
      "version": 0,
      "active": true,
      "question": "What does IIFE stand for? How do you write one?",
      "answer": "Immediately Invoked Function Expression   ( () => {   statements; })();   or   ( function() {   statements; })();",
      "reviews": []
    },
    {
      "id": "zh8x1sjafl",
      "version": 0,
      "active": true,
      "question": "ts: what is function overloading? How does it work?",
      "answer": "The idea is that you provide a function signature for each possible invocation of the function. Then, the last function declaration, which must have types that encompass all of the types declared above, defines the body of the function.   For example:   function foo(arg1: number, arg2: number): number; function foo(arg1: string, arg2: string): string; function foo(arg1: string | number, arg2: string | number) {   return arg1 || arg2; }",
      "reviews": []
    },
    {
      "id": "qrqat3idyo",
      "version": 0,
      "active": true,
      "question": "ts: what is the `never` type for?",
      "answer": "It represents the type of values that never occur. Appears in a few circumstances: - as return type of functions that never return - is the type of a variable that is type constrained, and all of whose types have already been accounted for in previous cases of a switch case or if-else statement",
      "reviews": []
    },
    {
      "id": "gv4tex6sj7",
      "version": 0,
      "active": true,
      "question": "How do you determine whether a variable is an array?",
      "answer": "Array.isArray(myVar);",
      "reviews": []
    },
    {
      "id": "jg3siuqy1a",
      "version": 0,
      "active": true,
      "question": "What does !!myVar do?",
      "answer": "It converts a value to the boolean type.",
      "reviews": []
    },
    {
      "id": "iv9d3dxuwx",
      "version": 0,
      "active": true,
      "question": "What does ?? do?",
      "answer": "\"It is referred to as the \"\"nullish coalescing\"\" operator. The code:   If the left side is not null or undefined, is equal to the left side. Otherwise, is equal to the right side.\"",
      "reviews": []
    },
    {
      "id": "tspjyblkc9",
      "version": 0,
      "active": true,
      "question": "How do you do the equivalent of Python's getattr and setattr?",
      "answer": "Reflect.get(target, property); Reflect.set(target, property, value);",
      "reviews": []
    },
    {
      "id": "wvi934j4ci",
      "version": 0,
      "active": true,
      "question": "ts: what does ReturnType<Type> do?",
      "answer": "It constructs a type equal to the return type of the function `Type`.",
      "reviews": []
    },
    {
      "id": "7booyqa5cc",
      "version": 0,
      "active": true,
      "question": "What is the result of:   let var1 = var2 = var3 = 1; console.log(var1); console.log(var2);  console.log(var3);",
      "answer": "1 1 1",
      "reviews": []
    },
    {
      "id": "cwhpu5d5l3",
      "version": 0,
      "active": true,
      "question": "ts: how do you specify which type is returned when a Promise is awaited? How do errors work in this case?",
      "answer": "Promise<string> etc   You cannot constrain the value of the error that a Promise may throw.",
      "reviews": []
    },
    {
      "id": "6rf548foyl",
      "version": 0,
      "active": true,
      "question": "\"node: how do you get the value of the environment variable \"\"MYVAR\"\"? What is the value if it is not set?\"",
      "answer": "\"process.env[\"\"MYVAR\"\"]; undefined\"",
      "reviews": []
    },
    {
      "id": "zui44r3idj",
      "version": 0,
      "active": true,
      "question": "nodejs: get the path separator for the platform",
      "answer": "path.sep",
      "reviews": []
    },
    {
      "id": "zjgp9db2jo",
      "version": 0,
      "active": true,
      "question": "nodejs: what are the two ways to access the promise part of the filesystem API?",
      "answer": "import fs from 'fs'; // then use fs.promises   import fsPromises from 'fs/promises';",
      "reviews": []
    },
    {
      "id": "eel7bh2j9v",
      "version": 0,
      "active": true,
      "question": "In javascript, what are the two values that are truthy that are suprising?",
      "answer": "[] (an empty array) {} (an empty object)",
      "reviews": []
    },
    {
      "id": "yp49w4r8ac",
      "version": 0,
      "active": true,
      "question": "ts: how do you tell the ts compiler that a certain variable will be not be undefined or null?",
      "answer": "Add a ! after it.",
      "reviews": []
    },
    {
      "id": "w1saleuiak",
      "version": 0,
      "active": true,
      "question": "nodejs: how do you read a file?",
      "answer": "const content = await fs.promises.readFile(path, encoding)",
      "reviews": []
    },
    {
      "id": "akh5ss15jq",
      "version": 0,
      "active": true,
      "question": "How do you get from the 2nd element of an array to the 5th element of an array, inclusive, as another array?",
      "answer": "myArray.slice(1, 5)",
      "reviews": []
    },
    {
      "id": "ll6msi12y6",
      "version": 0,
      "active": true,
      "question": "How do you convert a number to a string in its octal representation?",
      "answer": "myNumber.toString(8);",
      "reviews": []
    },
    {
      "id": "8y30hjxo8c",
      "version": 0,
      "active": true,
      "question": "nodejs: write a string to a file.",
      "answer": "await fs.promises.writeFile(path, myString, options);",
      "reviews": []
    },
    {
      "id": "uxirrdym8k",
      "version": 0,
      "active": true,
      "question": "jest: what must you do when testing code that works with Promises?",
      "answer": "You must either return the Promise you want to test from the code (whether wrapped by expect().resolves or not), or await it inside the test function.",
      "reviews": []
    },
    {
      "id": "1mv3cq8e2z",
      "version": 0,
      "active": true,
      "question": "enum MyEnum {     OptionOne = 'OptionOne',     OptionTwo = 'OptionTwo', }   let a = MyEnum.OptionOne; console.log(a); console.log(typeof a);   What is printed? Why?",
      "answer": "OptionOne string    Enums are basically syntactic sugar for a union literal typedef. Each element of them is just a number, or if defined as a string, a string.",
      "reviews": []
    },
    {
      "id": "oegje9nxfe",
      "version": 0,
      "active": true,
      "question": "ts: at runtime, what is an enum type?",
      "answer": "An enum type is just a regular Object. You can use typical Object methods on them.",
      "reviews": []
    },
    {
      "id": "s6xhe152ss",
      "version": 0,
      "active": true,
      "question": "What is the `prototype` property for? How does it work?",
      "answer": "\"Every object in js has a built-in property `prototype`. It is an object itself, which means it also has a `prototype` property. This creates a \"\"prototype chain\"\", which ends when we reach a prototype that has `null` for its own prototype.   When you access for a property of an object, and it is not immediately present, the prototype chain is searched for it until found or not. If not found, `undefined` is returned.    It can be used to add a method to an object after it is defined. But I'm not sure of what exactly is required to make this work...\"",
      "reviews": []
    },
    {
      "id": "ns76bbwmg6",
      "version": 0,
      "active": true,
      "question": "deno: what is the first part of every import of the stdlib?",
      "answer": "import ... from 'https://deno.land/std@<version>...'",
      "reviews": []
    },
    {
      "id": "9muisrc4ba",
      "version": 0,
      "active": true,
      "question": "deno: what is the (simplified) signature of the function used to read a file into a string?",
      "answer": "function readTextFile(path: string): Promise<string>",
      "reviews": []
    },
    {
      "id": "rseyasogjv",
      "version": 0,
      "active": true,
      "question": "deno: what is the (simplified) signature of the function used to write a string to a file?",
      "answer": "function writeTextFile(path: string, data: string): Promise<void>",
      "reviews": []
    },
    {
      "id": "uv7rceolcr",
      "version": 0,
      "active": true,
      "question": "nuxt: what are the most important directories at the root of a nuxt application (9 total)? What do they do?",
      "answer": "pages/: contain pages that are automatically mapped to routes in the application   components/: self-explanatory    assets/: non-compiled things, such as fonts, images and styles, that are used by the application   static/: mapped directly to the root of the server; not touched at all   nuxt.config.js: used to add modules and change default nuxt settings   layouts/: used to change look and feel of application   middleware/: contains custom functions that can be run before rendering either a page or a group of pages   plugins/: contains javascript code that you want to run before instantiating the root Vue.js application   store/: contains Vuex Store files",
      "reviews": []
    },
    {
      "id": "tusfpt8opy",
      "version": 0,
      "active": true,
      "question": "What is playwright?",
      "answer": "It is a framework for running E2E tests on a web app. Basically, for testing your UI.",
      "reviews": []
    },
    {
      "id": "tg775zxgse",
      "version": 0,
      "active": true,
      "question": "vuejs: what are the three ways of exporting components? Why would you use one or the other?",
      "answer": "1) Export an object literal. 2) Export the result of Vue.component. 3) Export the result of Vue.extend.   1 and 3 are preferable because they do not register components globally, which means that to be used they must be imported in the files in which they are used. This makes everything more understandable, especially on large projects.   However, 1 has a drawback. For whatever reason, it prevents typescript from checking certain things about the component. So, 3 is preferred. That must be why we use it.",
      "reviews": []
    },
    {
      "id": "iryjdcaw94",
      "version": 0,
      "active": true,
      "question": "vuejs: what directive is used to pass a variable and interpret it as HTML to a prop?",
      "answer": "v-html",
      "reviews": []
    },
    {
      "id": "qz2lkfglen",
      "version": 0,
      "active": true,
      "question": "How do you iterate over the keys and values of an Object?",
      "answer": "for (const [key, value] of Object.entries(myObj)) {   ... }",
      "reviews": []
    },
    {
      "id": "776n4tz3ht",
      "version": 0,
      "active": true,
      "question": "vuex: what is the difference between actions and mutations?",
      "answer": "mutations: must be synchronous; directly change the state   actions: call mutations; may contain asynchronous code",
      "reviews": []
    },
    {
      "id": "iaiamk8y0l",
      "version": 0,
      "active": true,
      "question": "ts: how do you avoid a runtime error when accessing a property that may be `null` or `undefined`? How does this work?",
      "answer": "\"Use the \"\"optional chaining\"\" operator, which is just a question mark appended to the name of the property that may be `null` or `undefined`.  Like this: myObject.myProperty?.myMethod();  If `myProperty` is `null` or `undefined`, it short-circuits the whole expression to be undefined without running myMethod.\"",
      "reviews": []
    },
    {
      "id": "qjwwatypbo",
      "version": 0,
      "active": true,
      "question": "What array method is used to get the first element of the array that satisfies a function?",
      "answer": "Array.find(func)",
      "reviews": []
    }
  ]
}