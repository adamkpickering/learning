{
  "name": "suse",
  "version": 0,
  "active": true,
  "cards": [
    {
      "id": "x6ek5kanec",
      "version": 0,
      "active": false,
      "question": "What are the four main products that Rancher has?\nExplain what they do.",
      "answer": "RKE: a CLI tool that makes it easy to create, manage and upgrade k8s clusters\n\nRancher: an application for managing k8s clusters; uses RKE\nbehind the scenes and provides more on top of it (dashboard, GUI etc)\n\nk3s: a minimal version of k8s\n\nlonghorn: a distributed storage solution for k8s",
      "reviews": []
    },
    {
      "id": "14j1vmucng",
      "version": 0,
      "active": true,
      "question": "How does networking work for lima VMs?",
      "answer": "There is a host agent and a guest agent. The guest agent notices\nany ports that are open on the guest and notifies the host agent\nabout them. The host agent then does SSH forwarding to make\nthese ports available on the same port on the host machine.",
      "reviews": [
        {
          "version": 0,
          "result": "normal",
          "datetime": "2023-04-26T23:08:27.672091544Z"
        },
        {
          "version": 0,
          "result": "normal",
          "datetime": "2023-04-20T23:59:17.081044744Z"
        }
      ]
    },
    {
      "id": "6ybcxdce3n",
      "version": 0,
      "active": false,
      "question": "For lima VMs, which directories are passed through to the VM?",
      "answer": "1) the home directory\n2) /tmp/lima or for RD /tmp/Rancher Desktop",
      "reviews": [
        {
          "version": 0,
          "result": "hard",
          "datetime": "2023-04-20T23:59:49.309454242Z"
        }
      ]
    },
    {
      "id": "v4soxd3x1h",
      "version": 0,
      "active": true,
      "question": "How do nerdctl, docker, kubectl etc talk to containerd, dockerd,\nkubernetes etc in a lima VM?",
      "answer": "kubectl and docker are simple because they simply tell the server what to do,\nand the server does it.\n\nnerdctl is more complex because it manages images on the local host.\nSo on the host we need to make it a shell script that calls\n\n  lima shell \u003cname\u003e nerdctl \u003cargs\u003e\n\nThis means all of the stuff get stored in the VM.",
      "reviews": [
        {
          "version": 0,
          "result": "easy",
          "datetime": "2023-04-26T23:09:00.339846683Z"
        },
        {
          "version": 0,
          "result": "hard",
          "datetime": "2023-04-21T00:01:39.660281325Z"
        }
      ]
    },
    {
      "id": "8dwhp3c4bn",
      "version": 0,
      "active": false,
      "question": "What is the interface between Rancher Desktop's frontend and its backend?",
      "answer": "Rancher Desktop simply calls `limactl` commands to control the lima VM\non MacOS and Linux. Likewise it calls `wsl.exe` on Windows.",
      "reviews": []
    },
    {
      "id": "a1w51nz0j3",
      "version": 0,
      "active": false,
      "question": "obs: how is build logic applied to the files in a package\nsuch that they become an actual .deb, .rpm etc?",
      "answer": "There is a .spec file (for building .rpms) in the .zip file that GHA uploads to S3.\n\nUnder the configured repositories, there are entries which list other\nprojects. Those projects define the logic to build the raw files\nplus the .spec file into an rpm, and to turn the rpm into a deb.",
      "reviews": []
    },
    {
      "id": "clekomljlt",
      "version": 0,
      "active": false,
      "question": "obs: how do you specify dependencies of a package?",
      "answer": "You list them in the package's .spec file. Not the OBS one, the rpm one.",
      "reviews": []
    },
    {
      "id": "eg88fvgk5y",
      "version": 0,
      "active": true,
      "question": "At a high level, how do Linux builds of Rancher Desktop work?",
      "answer": "1) GHA: lint, test etc\n2) GHA: package runnable code into .zip and upload to S3\n3) GHA: invoke OBS webhook\n4) OBS: get metadata (version info etc) in github\n5) OBS: download .zip file from S3\n6) OBS: changes trigger builds of packages",
      "reviews": [
        {
          "version": 0,
          "result": "normal",
          "datetime": "2023-04-26T23:09:52.630571157Z"
        },
        {
          "version": 0,
          "result": "normal",
          "datetime": "2023-04-21T00:03:44.793250624Z"
        }
      ]
    },
    {
      "id": "npje4s34lw",
      "version": 0,
      "active": true,
      "question": "RD: what does window.send() do?",
      "answer": "It emits an event to all renderer processes from the main process.",
      "reviews": [
        {
          "version": 0,
          "result": "normal",
          "datetime": "2023-04-26T23:10:58.110881595Z"
        },
        {
          "version": 0,
          "result": "failed",
          "datetime": "2023-04-21T00:03:55.956417743Z"
        }
      ]
    },
    {
      "id": "qa6kajpqw9",
      "version": 0,
      "active": false,
      "question": "At a high level, how do RD updates work?",
      "answer": "LonghornPublisher: modifies the `publish:` config from electron-updater.yml\n\nLonghornProvider: takes the modified publish config from electron-updater.yml and LonghornPublisher\n\nAppimageUpdater: takes a config object, which LonghornProvider is a part of;\nhas a number of callbacks registered on it that respond to things like\nnew versions being available (is an implementation of EventEmitter);\nis an implementation of AppUpdater\n\nUpgrade Responder is server that LonghornProvider interfaces with. It monitors\ngithub for new releases.",
      "reviews": []
    },
    {
      "id": "3u9rnce917",
      "version": 0,
      "active": false,
      "question": "RD: how does DNS resolution work on windows?",
      "answer": "WSL uses Hyper-V, which provides DNS resolution through some kind of NAT.\nSo it ends up using the configuration of the windows host somehow.",
      "reviews": []
    },
    {
      "id": "0kxpxz14ga",
      "version": 0,
      "active": false,
      "question": "cirrus-ci: what is the main object type? What is it made up of?",
      "answer": "The main object type is a task. Tasks are configured in .cirrus.yml. A task consists of an execution environment, and a sequence of instructions that the task executes.",
      "reviews": []
    },
    {
      "id": "6n54k1ljgw",
      "version": 0,
      "active": false,
      "question": "cirrus-ci: what are the five main types of instructions?",
      "answer": "*_script: defines a script to run   *_background_script: like *_script, but does not wait for it to complete before moving on to next instruction   *_cache: used to persist files between runs   *_artifacts: let you store and expose files created by task runs   *_file: lets you create a file from an environment variable",
      "reviews": []
    },
    {
      "id": "62y5rk90dl",
      "version": 0,
      "active": false,
      "question": "How does RD get to the General page by default?",
      "answer": "There is a middleware that redirects / to /General?",
      "reviews": []
    }
  ]
}